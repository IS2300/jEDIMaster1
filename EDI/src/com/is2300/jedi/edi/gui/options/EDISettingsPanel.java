/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.is2300.jedi.edi.gui.options;

import javax.swing.SpinnerNumberModel;
import org.openide.util.NbPreferences;

final class EDISettingsPanel extends javax.swing.JPanel {

    private final EDISettingsOptionsPanelController controller;

    EDISettingsPanel(EDISettingsOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        
        // Enable and disable our panels as necessary.
        setupDbPanel(this.chkDatabase.isSelected());
        setupFilePanel(this.chkFiles.isSelected());
        
        // Set the min and max values for the time period spinner.
        if ( this.optHours.isSelected() ) {
            setSpinLimits("hours");
        } else if ( this.optMinutes.isSelected() ) {
            setSpinLimits("minutes");
        }
        
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btngrpServer = new javax.swing.ButtonGroup();
        pnlServer = new javax.swing.JPanel();
        lblURL = new javax.swing.JLabel();
        txtURL = new javax.swing.JTextField();
        lblFilename = new javax.swing.JLabel();
        txtFilename = new javax.swing.JTextField();
        lblPeriod = new javax.swing.JLabel();
        spinPeriod = new javax.swing.JSpinner();
        optSeconds = new javax.swing.JRadioButton();
        optMinutes = new javax.swing.JRadioButton();
        optHours = new javax.swing.JRadioButton();
        pnlProcessing = new javax.swing.JPanel();
        chkDatabase = new javax.swing.JCheckBox();
        pnlDbServer = new javax.swing.JPanel();
        lblSvrPath = new javax.swing.JLabel();
        txtSvrPath = new javax.swing.JTextField();
        lblDbName = new javax.swing.JLabel();
        txtDbName = new javax.swing.JTextField();
        pnlOutput = new javax.swing.JPanel();
        lblOutputPath = new javax.swing.JLabel();
        txtOutputPath = new javax.swing.JTextField();
        chkFileNames = new javax.swing.JCheckBox();
        chkFiles = new javax.swing.JCheckBox();

        pnlServer.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(EDISettingsPanel.class, "EDISettingsPanel.pnlServer.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblURL, org.openide.util.NbBundle.getMessage(EDISettingsPanel.class, "EDISettingsPanel.lblURL.text")); // NOI18N

        txtURL.setText(org.openide.util.NbBundle.getMessage(EDISettingsPanel.class, "EDISettingsPanel.txtURL.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblFilename, org.openide.util.NbBundle.getMessage(EDISettingsPanel.class, "EDISettingsPanel.lblFilename.text")); // NOI18N

        txtFilename.setText(org.openide.util.NbBundle.getMessage(EDISettingsPanel.class, "EDISettingsPanel.txtFilename.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblPeriod, org.openide.util.NbBundle.getMessage(EDISettingsPanel.class, "EDISettingsPanel.lblPeriod.text")); // NOI18N

        spinPeriod.setModel(new javax.swing.SpinnerNumberModel(15, 0, 60, 1));

        btngrpServer.add(optSeconds);
        org.openide.awt.Mnemonics.setLocalizedText(optSeconds, org.openide.util.NbBundle.getMessage(EDISettingsPanel.class, "EDISettingsPanel.optSeconds.text")); // NOI18N
        optSeconds.setEnabled(false);

        btngrpServer.add(optMinutes);
        optMinutes.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(optMinutes, org.openide.util.NbBundle.getMessage(EDISettingsPanel.class, "EDISettingsPanel.optMinutes.text")); // NOI18N

        btngrpServer.add(optHours);
        org.openide.awt.Mnemonics.setLocalizedText(optHours, org.openide.util.NbBundle.getMessage(EDISettingsPanel.class, "EDISettingsPanel.optHours.text")); // NOI18N

        javax.swing.GroupLayout pnlServerLayout = new javax.swing.GroupLayout(pnlServer);
        pnlServer.setLayout(pnlServerLayout);
        pnlServerLayout.setHorizontalGroup(
            pnlServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlServerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblPeriod)
                    .addComponent(lblFilename)
                    .addComponent(lblURL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtURL)
                    .addComponent(txtFilename)
                    .addGroup(pnlServerLayout.createSequentialGroup()
                        .addComponent(spinPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(optSeconds)
                        .addGap(35, 35, 35)
                        .addComponent(optMinutes)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                        .addComponent(optHours)))
                .addContainerGap())
        );
        pnlServerLayout.setVerticalGroup(
            pnlServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlServerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblURL)
                    .addComponent(txtURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFilename)
                    .addComponent(txtFilename, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPeriod)
                    .addComponent(spinPeriod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(optSeconds)
                    .addComponent(optMinutes)
                    .addComponent(optHours))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlProcessing.setBorder(javax.swing.BorderFactory.createTitledBorder(org.openide.util.NbBundle.getMessage(EDISettingsPanel.class, "EDISettingsPanel.pnlProcessing.border.title"))); // NOI18N

        chkDatabase.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(chkDatabase, org.openide.util.NbBundle.getMessage(EDISettingsPanel.class, "EDISettingsPanel.chkDatabase.text")); // NOI18N
        chkDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkDatabaseActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(lblSvrPath, org.openide.util.NbBundle.getMessage(EDISettingsPanel.class, "EDISettingsPanel.lblSvrPath.text")); // NOI18N

        txtSvrPath.setText(org.openide.util.NbBundle.getMessage(EDISettingsPanel.class, "EDISettingsPanel.txtSvrPath.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(lblDbName, org.openide.util.NbBundle.getMessage(EDISettingsPanel.class, "EDISettingsPanel.lblDbName.text")); // NOI18N

        txtDbName.setText(org.openide.util.NbBundle.getMessage(EDISettingsPanel.class, "EDISettingsPanel.txtDbName.text")); // NOI18N

        javax.swing.GroupLayout pnlDbServerLayout = new javax.swing.GroupLayout(pnlDbServer);
        pnlDbServer.setLayout(pnlDbServerLayout);
        pnlDbServerLayout.setHorizontalGroup(
            pnlDbServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDbServerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlDbServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblDbName)
                    .addComponent(lblSvrPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDbServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSvrPath)
                    .addComponent(txtDbName))
                .addContainerGap())
        );
        pnlDbServerLayout.setVerticalGroup(
            pnlDbServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDbServerLayout.createSequentialGroup()
                .addGroup(pnlDbServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSvrPath)
                    .addComponent(txtSvrPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlDbServerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDbName)
                    .addComponent(txtDbName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        org.openide.awt.Mnemonics.setLocalizedText(lblOutputPath, org.openide.util.NbBundle.getMessage(EDISettingsPanel.class, "EDISettingsPanel.lblOutputPath.text")); // NOI18N

        txtOutputPath.setText(org.openide.util.NbBundle.getMessage(EDISettingsPanel.class, "EDISettingsPanel.txtOutputPath.text")); // NOI18N

        chkFileNames.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(chkFileNames, org.openide.util.NbBundle.getMessage(EDISettingsPanel.class, "EDISettingsPanel.chkFileNames.text")); // NOI18N

        javax.swing.GroupLayout pnlOutputLayout = new javax.swing.GroupLayout(pnlOutput);
        pnlOutput.setLayout(pnlOutputLayout);
        pnlOutputLayout.setHorizontalGroup(
            pnlOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOutputLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlOutputLayout.createSequentialGroup()
                        .addComponent(lblOutputPath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtOutputPath))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlOutputLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(chkFileNames)))
                .addContainerGap())
        );
        pnlOutputLayout.setVerticalGroup(
            pnlOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlOutputLayout.createSequentialGroup()
                .addGroup(pnlOutputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOutputPath)
                    .addComponent(txtOutputPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkFileNames))
        );

        chkFiles.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(chkFiles, org.openide.util.NbBundle.getMessage(EDISettingsPanel.class, "EDISettingsPanel.chkFiles.text")); // NOI18N
        chkFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkFilesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlProcessingLayout = new javax.swing.GroupLayout(pnlProcessing);
        pnlProcessing.setLayout(pnlProcessingLayout);
        pnlProcessingLayout.setHorizontalGroup(
            pnlProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProcessingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlProcessingLayout.createSequentialGroup()
                        .addGroup(pnlProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(chkDatabase)
                            .addComponent(chkFiles))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlProcessingLayout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(pnlProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pnlDbServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pnlOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        pnlProcessingLayout.setVerticalGroup(
            pnlProcessingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlProcessingLayout.createSequentialGroup()
                .addComponent(chkDatabase)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlDbServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkFiles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlServer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlProcessing, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlProcessing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void chkDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkDatabaseActionPerformed
        // Whenever the value of the checkbox changes, we need to enable and
        //+ disable the panel and its contained controls with it.
        setupDbPanel(this.chkDatabase.isSelected());
    }//GEN-LAST:event_chkDatabaseActionPerformed

    private void chkFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkFilesActionPerformed
        // Whenever the value of the checkbox changes, we need to enable and
        //+ disable the panel and its contained controls with it.
        setupFilePanel(this.chkFiles.isSelected());
    }//GEN-LAST:event_chkFilesActionPerformed

    void load() {
        // Create a SpinnerNumberModel for later use.
        SpinnerNumberModel spinMdl;
        
        // TODO read settings and initialize GUI
        // Example:        
        // someCheckBox.setSelected(Preferences.userNodeForPackage(
        //+              EDISettingsPanel.class).getBoolean("someFlag", false));
        // or for org.openide.util with API spec. version >= 7.4:
        // someCheckBox.setSelected(NbPreferences.forModule(
        //+              EDISettingsPanel.class).getBoolean("someFlag", false));
        txtURL.setText(NbPreferences.forModule(EDISettingsPanel.class).get(
                                                "SvrURL", "file:///incoming/"));
        txtFilename.setText(NbPreferences.forModule(EDISettingsPanel.class).get(
                                                "EDIFilename", "incoming.edi"));
        
        // Set the appropriate option button, depending on what was previously
        //+ stored to the settings.
        String period = NbPreferences.forModule(EDISettingsPanel.class).get(
                                                       "TimePeriod", "minutes");
        if ( period.equalsIgnoreCase("minutes") ) {
            optMinutes.setSelected(true);
            spinMdl = new SpinnerNumberModel(10, 5, 60, 5);
            spinPeriod.setModel(spinMdl);
        } else if ( period.equalsIgnoreCase("hours") ) {
            optHours.setSelected(true);
            spinMdl = new SpinnerNumberModel(1, 1, 24, 1);
            spinPeriod.setModel(spinMdl);
        }
        spinPeriod.setValue(NbPreferences.forModule(EDISettingsPanel.class)
                                                    .getInt("CheckPeriod", 15));
        chkDatabase.setSelected(NbPreferences.forModule(EDISettingsPanel.class)
                                                 .getBoolean("Database", true));
        txtSvrPath.setText(NbPreferences.forModule(EDISettingsPanel.class).get(
                                                  "SvrPath", "localhost:3360"));
        chkFiles.setSelected(NbPreferences.forModule(EDISettingsPanel.class)
                                              .getBoolean("FileOutput", false));
        txtOutputPath.setText(NbPreferences.forModule(EDISettingsPanel.class)
                                       .get("OutputPath", "/home/edi/output/"));
        chkFileNames.setSelected(NbPreferences.forModule(EDISettingsPanel.class)
                                                 .getBoolean("LongName", true));
    }

    void store() {
        // TODO store modified settings
        //+ Example:
        //+ Preferences.userNodeForPackage(EDISettingsPanel.class).putBoolean(
        //+                             "someFlag", someCheckBox.isSelected());
        //+ or for org.openide.util with API spec. version >= 7.4:
        //+ NbPreferences.forModule(EDISettingsPanel.class).putBoolean(
        //+                             "someFlag", someCheckBox.isSelected());
        NbPreferences.forModule(EDISettingsPanel.class).put("SvrURL", 
                                                              txtURL.getText());
        NbPreferences.forModule(EDISettingsPanel.class).put("EDIFilename", 
                                                         txtFilename.getText());
        NbPreferences.forModule(EDISettingsPanel.class).putInt("CheckPeriod", 
                                               (Integer) spinPeriod.getValue());
        
        // Determine whether the period option selected is Minutes or Hours.
        String period = "";  // String to hold the select time period.
        if ( optMinutes.isSelected() ) {
            period = "minutes";
        } else if ( optHours.isSelected() ) {
            period = "hours";
        }
        
        NbPreferences.forModule(EDISettingsPanel.class).put("TimePeriod", 
                                                                        period);
        NbPreferences.forModule(EDISettingsPanel.class).putBoolean("Database", 
                                                      chkDatabase.isSelected());
        NbPreferences.forModule(EDISettingsPanel.class).put("SvrPath", 
                                                          txtSvrPath.getText());
        NbPreferences.forModule(EDISettingsPanel.class).put("DBName", 
                                                           txtDbName.getText());
        NbPreferences.forModule(EDISettingsPanel.class).putBoolean("FileOutput",
                                                         chkFiles.isSelected());
        NbPreferences.forModule(EDISettingsPanel.class).put("OutputPath", 
                                                       txtOutputPath.getText());
        NbPreferences.forModule(EDISettingsPanel.class).putBoolean("LongName", 
                                                     chkFileNames.isSelected());
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btngrpServer;
    private javax.swing.JCheckBox chkDatabase;
    private javax.swing.JCheckBox chkFileNames;
    private javax.swing.JCheckBox chkFiles;
    private javax.swing.JLabel lblDbName;
    private javax.swing.JLabel lblFilename;
    private javax.swing.JLabel lblOutputPath;
    private javax.swing.JLabel lblPeriod;
    private javax.swing.JLabel lblSvrPath;
    private javax.swing.JLabel lblURL;
    private javax.swing.JRadioButton optHours;
    private javax.swing.JRadioButton optMinutes;
    private javax.swing.JRadioButton optSeconds;
    private javax.swing.JPanel pnlDbServer;
    private javax.swing.JPanel pnlOutput;
    private javax.swing.JPanel pnlProcessing;
    private javax.swing.JPanel pnlServer;
    private javax.swing.JSpinner spinPeriod;
    private javax.swing.JTextField txtDbName;
    private javax.swing.JTextField txtFilename;
    private javax.swing.JTextField txtOutputPath;
    private javax.swing.JTextField txtSvrPath;
    private javax.swing.JTextField txtURL;
    // End of variables declaration//GEN-END:variables

    private void setupDbPanel(boolean selected) {
        this.pnlDbServer.setEnabled(this.chkDatabase.isSelected());
        this.txtDbName.setEnabled(this.chkDatabase.isSelected());
        this.txtSvrPath.setEnabled(this.chkDatabase.isSelected());
        this.lblDbName.setEnabled(this.chkDatabase.isSelected());
        this.lblSvrPath.setEnabled(this.chkDatabase.isSelected());
    }

    private void setupFilePanel(boolean selected) {
        this.pnlOutput.setEnabled(this.chkFiles.isSelected());
        this.txtOutputPath.setEnabled(this.chkFiles.isSelected());
        this.chkFileNames.setEnabled(this.chkFiles.isSelected());
        this.lblOutputPath.setEnabled(this.chkFiles.isSelected());
    }

    private void setSpinLimits(String toString) {
        if ( toString.equalsIgnoreCase("hours") ) {
            this.spinPeriod.setModel(new SpinnerNumberModel(1, 1, 24, 1));
        } else if ( toString.equalsIgnoreCase("minutes") ) {
            this.spinPeriod.setModel(new SpinnerNumberModel(10, 5, 60, 5));
        }
    }
}
